//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public AnyCurrentMergedObjectsCountListenerComponent anyCurrentMergedObjectsCountListener { get { return (AnyCurrentMergedObjectsCountListenerComponent)GetComponent(GameComponentsLookup.AnyCurrentMergedObjectsCountListener); } }
    public bool hasAnyCurrentMergedObjectsCountListener { get { return HasComponent(GameComponentsLookup.AnyCurrentMergedObjectsCountListener); } }

    public void AddAnyCurrentMergedObjectsCountListener(System.Collections.Generic.List<IAnyCurrentMergedObjectsCountListener> newValue) {
        var index = GameComponentsLookup.AnyCurrentMergedObjectsCountListener;
        var component = (AnyCurrentMergedObjectsCountListenerComponent)CreateComponent(index, typeof(AnyCurrentMergedObjectsCountListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceAnyCurrentMergedObjectsCountListener(System.Collections.Generic.List<IAnyCurrentMergedObjectsCountListener> newValue) {
        var index = GameComponentsLookup.AnyCurrentMergedObjectsCountListener;
        var component = (AnyCurrentMergedObjectsCountListenerComponent)CreateComponent(index, typeof(AnyCurrentMergedObjectsCountListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveAnyCurrentMergedObjectsCountListener() {
        RemoveComponent(GameComponentsLookup.AnyCurrentMergedObjectsCountListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAnyCurrentMergedObjectsCountListener;

    public static Entitas.IMatcher<GameEntity> AnyCurrentMergedObjectsCountListener {
        get {
            if (_matcherAnyCurrentMergedObjectsCountListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AnyCurrentMergedObjectsCountListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAnyCurrentMergedObjectsCountListener = matcher;
            }

            return _matcherAnyCurrentMergedObjectsCountListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddAnyCurrentMergedObjectsCountListener(IAnyCurrentMergedObjectsCountListener value) {
        var listeners = hasAnyCurrentMergedObjectsCountListener
            ? anyCurrentMergedObjectsCountListener.value
            : new System.Collections.Generic.List<IAnyCurrentMergedObjectsCountListener>();
        listeners.Add(value);
        ReplaceAnyCurrentMergedObjectsCountListener(listeners);
    }

    public void RemoveAnyCurrentMergedObjectsCountListener(IAnyCurrentMergedObjectsCountListener value, bool removeComponentWhenEmpty = true) {
        var listeners = anyCurrentMergedObjectsCountListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveAnyCurrentMergedObjectsCountListener();
        } else {
            ReplaceAnyCurrentMergedObjectsCountListener(listeners);
        }
    }
}
