//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity currentMergedObjectsCountEntity { get { return GetGroup(GameMatcher.CurrentMergedObjectsCount).GetSingleEntity(); } }
    public CurrentMergedObjectsCount currentMergedObjectsCount { get { return currentMergedObjectsCountEntity.currentMergedObjectsCount; } }
    public bool hasCurrentMergedObjectsCount { get { return currentMergedObjectsCountEntity != null; } }

    public GameEntity SetCurrentMergedObjectsCount(int newValue) {
        if (hasCurrentMergedObjectsCount) {
            throw new Entitas.EntitasException("Could not set CurrentMergedObjectsCount!\n" + this + " already has an entity with CurrentMergedObjectsCount!",
                "You should check if the context already has a currentMergedObjectsCountEntity before setting it or use context.ReplaceCurrentMergedObjectsCount().");
        }
        var entity = CreateEntity();
        entity.AddCurrentMergedObjectsCount(newValue);
        return entity;
    }

    public void ReplaceCurrentMergedObjectsCount(int newValue) {
        var entity = currentMergedObjectsCountEntity;
        if (entity == null) {
            entity = SetCurrentMergedObjectsCount(newValue);
        } else {
            entity.ReplaceCurrentMergedObjectsCount(newValue);
        }
    }

    public void RemoveCurrentMergedObjectsCount() {
        currentMergedObjectsCountEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public CurrentMergedObjectsCount currentMergedObjectsCount { get { return (CurrentMergedObjectsCount)GetComponent(GameComponentsLookup.CurrentMergedObjectsCount); } }
    public bool hasCurrentMergedObjectsCount { get { return HasComponent(GameComponentsLookup.CurrentMergedObjectsCount); } }

    public void AddCurrentMergedObjectsCount(int newValue) {
        var index = GameComponentsLookup.CurrentMergedObjectsCount;
        var component = (CurrentMergedObjectsCount)CreateComponent(index, typeof(CurrentMergedObjectsCount));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceCurrentMergedObjectsCount(int newValue) {
        var index = GameComponentsLookup.CurrentMergedObjectsCount;
        var component = (CurrentMergedObjectsCount)CreateComponent(index, typeof(CurrentMergedObjectsCount));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveCurrentMergedObjectsCount() {
        RemoveComponent(GameComponentsLookup.CurrentMergedObjectsCount);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCurrentMergedObjectsCount;

    public static Entitas.IMatcher<GameEntity> CurrentMergedObjectsCount {
        get {
            if (_matcherCurrentMergedObjectsCount == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CurrentMergedObjectsCount);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCurrentMergedObjectsCount = matcher;
            }

            return _matcherCurrentMergedObjectsCount;
        }
    }
}
