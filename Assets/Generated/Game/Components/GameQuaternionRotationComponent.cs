//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public QuaternionRotationComponent quaternionRotation { get { return (QuaternionRotationComponent)GetComponent(GameComponentsLookup.QuaternionRotation); } }
    public bool hasQuaternionRotation { get { return HasComponent(GameComponentsLookup.QuaternionRotation); } }

    public void AddQuaternionRotation(UnityEngine.Quaternion newValue) {
        var index = GameComponentsLookup.QuaternionRotation;
        var component = (QuaternionRotationComponent)CreateComponent(index, typeof(QuaternionRotationComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceQuaternionRotation(UnityEngine.Quaternion newValue) {
        var index = GameComponentsLookup.QuaternionRotation;
        var component = (QuaternionRotationComponent)CreateComponent(index, typeof(QuaternionRotationComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveQuaternionRotation() {
        RemoveComponent(GameComponentsLookup.QuaternionRotation);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherQuaternionRotation;

    public static Entitas.IMatcher<GameEntity> QuaternionRotation {
        get {
            if (_matcherQuaternionRotation == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.QuaternionRotation);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherQuaternionRotation = matcher;
            }

            return _matcherQuaternionRotation;
        }
    }
}
